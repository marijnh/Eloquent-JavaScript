#!/usr/bin/env node

var fs = require("fs");

var text = "";

var addBookmark = process.argv.indexOf("--bookmark") > -1;

process.stdin.resume();
process.stdin.on("data", function(data) {
  text += data.toString("utf8");
});
process.stdin.on("end", function() {
  var pre = "";
  if (addBookmark) {
    var mark = hash(toPlainText(text));
    pre = "<a class=c_ident id=\"c_" + mark + "\" href=\"#c_" + mark + "\"></a>";
  }
  var out = highlight(text, process.argv[process.argv.indexOf("-s") + 1].toLowerCase())
  process.stdout.write(pre + out, "utf8");  
});

function hash(string) {
  var sum = require("crypto").createHash("sha1");
  sum.update(string);
  return sum.digest("base64").slice(0, 10);
}

function toPlainText(text) {
  return text.replace(/<[^>]+>|&[^;]+;/g, "");
}

function startAndEnd(text) {
  var words = text.split(/\W+/);
  if (!words[0]) words.shift();
  if (!words[words.length - 1]) words.pop();
  if (words.length <= 6) return words.join(" ");
  return words.slice(0, 3).join(" ") + " " + words.slice(words.length - 3).join(" ");
}

CodeMirror = require("../node_modules/codemirror/addon/runmode/runmode.node.js");
require("../node_modules/codemirror/mode/meta.js");

function ensureMode(name) {
  if (CodeMirror.modes[name] || name == "null") return;
  try {
    require("../node_modules/codemirror/mode/" + name + "/" + name + ".js");
  } catch(e) {
    console.error("Could not load mode " + name + ".");
    process.exit(1);
  }
  var obj = CodeMirror.modes[name];
  if (obj.dependencies) obj.dependencies.forEach(ensureMode);
}

function esc(str) {
  return str.replace(/[<&]/g, function(ch) { return ch == "&" ? "&amp;" : "&lt;"; });
}

function highlight(code, lang) {
  var modeName = lang;
  CodeMirror.modeInfo.forEach(function(info) {
    if (info.mime == lang) {
      modeName = info.mode;
    } else if (info.name.toLowerCase() == lang) {
      modeName = info.mode;
      lang = info.mime;
    }
  });
  ensureMode(modeName);

  var curStyle = null, accum = "", output = "";
  function flush() {
    if (curStyle) output += "<span class=\"" + curStyle.replace(/(^|\s+)/g, "$1cm-") + "\">" + esc(accum) + "</span>";
    else output += esc(accum);
  }

  CodeMirror.runMode(code, lang, function(text, style) {
    if (style != curStyle) {
      flush();
      curStyle = style; accum = text;
    } else {
      accum += text;
    }
  });
  flush();
  return output;
}
